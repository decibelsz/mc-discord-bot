import { Injectable, Logger } from '@nestjs/common';
import { Context, ContextOf, On } from 'necord';
import { Rcon } from 'rcon-client';
import { 
  MessageFlags, 
  ModalBuilder, 
  TextInputBuilder, 
  TextInputStyle, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle, 
  ChannelType,
  ContainerBuilder,
  SeparatorBuilder,
  SeparatorSpacingSize,
  TextDisplayBuilder,
  type MessageActionRowComponentBuilder
} from 'discord.js';

@Injectable()
export class ButtonEvent {
  private readonly logger = new Logger(ButtonEvent.name);

  private readonly rconConfig = {
    host: process.env.RCON_HOST || '168.231.89.180',
    port: parseInt(process.env.RCON_PORT || '25575'),
    password: process.env.RCON_PASSWORD || 'SUA_SENHA_RCON'
  };



  @On('interactionCreate')
  public async onButtonInteraction(@Context() [interaction]: ContextOf<'interactionCreate'>) {
    if (interaction.isButton()) {
      await this.handleButtonInteraction(interaction);
      return;
    }

    if (interaction.isModalSubmit()) {
      await this.handleModalSubmit(interaction);
      return;
    }
  }

  private async handleButtonInteraction(interaction: any) {
    if (interaction.customId === '9cffd086283f4151a968f96d236175ad') {
      await interaction.reply({
        content: process.env.RCON_HOST || '168.231.89.180',
        flags: MessageFlags.Ephemeral
      });

      this.logger.debug(`üîó ${interaction.user.username} clicou no bot√£o conectar`);
    }
    
    if (interaction.customId === '1f8d34948b7c4089d6d8803a384b4bb9') {
      const modal = new ModalBuilder()
        .setCustomId('whitelist-modal')
        .setTitle('üìù Solicita√ß√£o de Whitelist');

      const nicknameInput = new TextInputBuilder()
        .setCustomId('minecraft-nickname')
        .setLabel('Qual o seu nickname do Minecraft?')
        .setStyle(TextInputStyle.Short)
        .setPlaceholder('Digite seu nickname exatamente como aparece no jogo')
        .setRequired(true)
        .setMaxLength(16)
        .setMinLength(3);

      const actionRow = new ActionRowBuilder<TextInputBuilder>()
        .addComponents(nicknameInput);

      modal.addComponents(actionRow);

      await interaction.showModal(modal);
      
      this.logger.debug(`üìù ${interaction.user.username} abriu o modal de whitelist`);
    }

    if (interaction.customId === 'comandos-panel-button') {
      const comandosComponents = [
        new ContainerBuilder()
          .setAccentColor(16711680)
          // .addSeparatorComponents(
          //   new SeparatorBuilder()
          //     .setSpacing(SeparatorSpacingSize.Small)
          //     .setDivider(true),
          // )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("**-# üîí COMANDOS DE PROTE√á√ÉO (BAUS)**"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cmodify [nickname]` - Adiciona ou remove permiss√£o de outro jogador (clique no ba√∫ primeiro)"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cmodify -[nickname]` - Remove permiss√£o de um jogador espec√≠fico"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cunlock [senha]` - Abre ba√∫ protegido com senha"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cowner [nickname]` - Passa a propriedade do ba√∫ para outro jogador"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cprivate` - Protege ba√∫ s√≥ para voc√™ (clique no ba√∫ depois)"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cpublic` - Deixa ba√∫ aberto para todos (qualquer um pode usar)"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cpassword [senha]` - Protege ba√∫ com senha"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cremove` - Remove prote√ß√£o do ba√∫ (clique no ba√∫ primeiro)"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/cinfo` - Mostra informa√ß√µes da prote√ß√£o (clique no ba√∫)"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("**-# üè† COMANDOS DE TELEPORTE PARA CASA**"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/home [nome]` - Teleporta para sua casa"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/sethome [nome]` - Marca este local como sua casa"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/delhome [nome]` - Remove uma casa marcada"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("**-# üöÄ COMANDOS DE TELEPORTE PARA JOGADOR**"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/tp [nickname]` - Teleporta para onde est√° um jogador"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("**-# üõ°Ô∏è COMANDOS TERRITORIO**"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/claim` - Protege uma √°rea do seu terreno"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/abandonclaim` - Remove prote√ß√£o de uma √°rea"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/trust [nickname]` - Permite que algu√©m construa na sua √°rea"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/untrust [nickname]` - Remove permiss√£o de construir"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/trustlist` - Mostra quem pode construir na sua √°rea"),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("-# `/claiminfo` - Mostra informa√ß√µes da √°rea protegida"),
          )
          .addSeparatorComponents(
            new SeparatorBuilder()
              .setSpacing(SeparatorSpacingSize.Small)
              .setDivider(true),
          )
          .addTextDisplayComponents(
            new TextDisplayBuilder()
              .setContent("**-# üí° DICA:** Use `/help` no jogo para ver mais comandos!"),
          ),
      ];

      await interaction.reply({
        components: comandosComponents,
        flags: MessageFlags.Ephemeral | MessageFlags.IsComponentsV2
      });

      this.logger.debug(`üìã ${interaction.user.username} visualizou a lista de comandos`);
    }

    if (interaction.customId.startsWith('approve-')) {
      const channelId = interaction.customId.replace('approve-', '');
      const channel = interaction.guild.channels.cache.get(channelId);
      
      if (!channel) {
        await interaction.reply({
          content: '‚ùå **Erro:** Canal n√£o encontrado.',
          flags: MessageFlags.Ephemeral
        });
        return;
      }

      const nickname = channel.name;
      
      try {
        const rcon = new Rcon({
          host: this.rconConfig.host,
          port: this.rconConfig.port,
          password: this.rconConfig.password
        });
        
        await rcon.connect();
        
        const command = `whitelist add ${nickname}`;
        const result = await rcon.send(command);
        
        await rcon.end();
        
        await interaction.reply({
          content: `‚úÖ **Whitelist Aprovada!**\n\nüéÆ **Nickname:** \`${nickname}\`\nüîß **Comando executado:** \`${command}\`\nüìã **Resultado:** \`${result}\`\n\n‚ú® O jogador foi adicionado √† whitelist do servidor!`,
          flags: MessageFlags.Ephemeral
        });

        const approvedComponents = [
          new ContainerBuilder()
            .setAccentColor(16711680)
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent("-# WHITELIST APROVADA!"),
            )
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# **Nickname:** \`${nickname}\``),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# **Aprovado por:** ${interaction.user.toString()}`),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# **Data da Aprova√ß√£o:** <t:${Math.floor(Date.now() / 1000)}:F>`),
            )
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent("-# **O jogador foi adicionado √† whitelist do servidor!**"),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent("-# **Este canal ser√° fechado em 10 segundos.**"),
            ),
        ];

        await channel.send({
          components: approvedComponents,
          flags: MessageFlags.IsComponentsV2
        });

        this.logger.log(`‚úÖ ${interaction.user.username} aprovou whitelist para ${nickname} - Comando: ${command} - Resultado: ${result}`);

        setTimeout(async () => {
          try {
            await channel.delete('Whitelist aprovada - canal finalizado');
            this.logger.log(`‚úÖ Canal ${channel.name} exclu√≠do ap√≥s aprova√ß√£o`);
          } catch (error) {
            this.logger.error('Erro ao excluir canal ap√≥s aprova√ß√£o:', error);
          }
        }, 10000);

      } catch (error) {
        this.logger.error('Erro ao executar comando via RCON:', error);
        await interaction.reply({
          content: `‚ùå **Erro ao executar comando via RCON!**\n\nüéÆ **Nickname:** \`${nickname}\`\n‚ö†Ô∏è **Erro:** ${error.message}\n\nüîß Verifique se:\n‚Ä¢ O servidor est√° rodando\n‚Ä¢ RCON est√° habilitado\n‚Ä¢ A senha RCON est√° correta\n‚Ä¢ A porta RCON est√° acess√≠vel`,
          flags: MessageFlags.Ephemeral
        });
      }
    }

    if (interaction.customId.startsWith('deny-')) {
      const channelId = interaction.customId.replace('deny-', '');
      const channel = interaction.guild.channels.cache.get(channelId);
      
      if (channel) {
        await interaction.reply({
          content: `‚ùå **Solicita√ß√£o Negada**\n\nEste canal ser√° exclu√≠do em 5 segundos.`,
          flags: MessageFlags.Ephemeral
        });

        setTimeout(async () => {
          try {
            await channel.delete('Solicita√ß√£o de whitelist negada');
            this.logger.log(`‚ùå ${interaction.user.username} negou whitelist - Canal ${channel.name} exclu√≠do`);
          } catch (error) {
            this.logger.error('Erro ao excluir canal:', error);
          }
        }, 5000);
      } else {
        await interaction.reply({
          content: '‚ùå **Erro:** Canal n√£o encontrado.',
          flags: MessageFlags.Ephemeral
        });
      }
    }
  }

  private async handleModalSubmit(interaction: any) {
    if (interaction.customId === 'whitelist-modal') {
      const nickname = interaction.fields.getTextInputValue('minecraft-nickname');
      
      try {
        let skipWhitelistCheck = false;
        
        try {
          const rcon = new Rcon({
            host: this.rconConfig.host,
            port: this.rconConfig.port,
            password: this.rconConfig.password
          });
          
          await rcon.connect();
          const whitelistResult = await rcon.send('whitelist list');
          await rcon.end();
          
          if (whitelistResult.toLowerCase().includes(nickname.toLowerCase())) {
            const alreadyWhitelistedComponents = [
              new ContainerBuilder()
                .setAccentColor(16711680)
                .addSeparatorComponents(
                  new SeparatorBuilder()
                    .setSpacing(SeparatorSpacingSize.Small)
                    .setDivider(true),
                )
                .addTextDisplayComponents(
                  new TextDisplayBuilder()
                    .setContent("-# Jogador j√° est√° na whitelist!"),
                )
                .addSeparatorComponents(
                  new SeparatorBuilder()
                    .setSpacing(SeparatorSpacingSize.Small)
                    .setDivider(true),
                )
                .addTextDisplayComponents(
                  new TextDisplayBuilder()
                    .setContent(`-# **Nickname:** \`${nickname}\``),
                )
                .addTextDisplayComponents(
                  new TextDisplayBuilder()
                    .setContent(`-# **Status:** J√° possui acesso ao servidor`),
                )
                .addSeparatorComponents(
                  new SeparatorBuilder()
                    .setSpacing(SeparatorSpacingSize.Small)
                    .setDivider(true),
                )
                .addTextDisplayComponents(
                  new TextDisplayBuilder()
                    .setContent("-# **Este jogador j√° tem acesso ao servidor.**"),
                )
                .addTextDisplayComponents(
                  new TextDisplayBuilder()
                    .setContent("-# **N√£o √© necess√°rio fazer nova solicita√ß√£o.**"),
                ),
            ];

            await interaction.reply({
              components: alreadyWhitelistedComponents,
              flags: MessageFlags.Ephemeral | MessageFlags.IsComponentsV2
            });
            
            this.logger.log(`‚ö†Ô∏è ${interaction.user.username} tentou solicitar whitelist para ${nickname}, mas j√° est√° na whitelist`);
            return;
          }
          
          this.logger.debug(`üîç Verifica√ß√£o de whitelist conclu√≠da para ${nickname} - n√£o est√° na whitelist`);
          
        } catch (rconError) {
          this.logger.warn(`‚ö†Ô∏è Erro ao verificar whitelist via RCON: ${rconError.message}. Prosseguindo com cria√ß√£o do canal.`);
          skipWhitelistCheck = true;
        }
        
        const guild = interaction.guild;
        const category = guild.channels.cache.find(
          (channel: any) => channel.name === 'whitelist_minecraft' && channel.type === ChannelType.GuildCategory
        );

        if (!category) {
          await interaction.reply({
            content: '‚ùå **Erro:** Categoria "whitelist_minecraft" n√£o encontrada. Entre em contato com os administradores.',
            flags: MessageFlags.Ephemeral
          });
          return;
        }

        const existingChannel = category.children.cache.find(
          (channel: any) => channel.name === nickname.toLowerCase()
        );
        
        if (existingChannel) {
          const duplicateRequestComponents = [
            new ContainerBuilder()
              .setAccentColor(16711680)
              .addSeparatorComponents(
                new SeparatorBuilder()
                  .setSpacing(SeparatorSpacingSize.Small)
                  .setDivider(true),
              )
              .addTextDisplayComponents(
                new TextDisplayBuilder()
                  .setContent("-# Solicita√ß√£o j√° existe!"),
              )
              .addSeparatorComponents(
                new SeparatorBuilder()
                  .setSpacing(SeparatorSpacingSize.Small)
                  .setDivider(true),
              )
              .addTextDisplayComponents(
                new TextDisplayBuilder()
                  .setContent(`-# **Nickname:** \`${nickname}\``),
              )
              .addTextDisplayComponents(
                new TextDisplayBuilder()
                  .setContent(`-# **Canal:** ${existingChannel.toString()}`),
              )
              .addSeparatorComponents(
                new SeparatorBuilder()
                  .setSpacing(SeparatorSpacingSize.Small)
                  .setDivider(true),
              )
              .addTextDisplayComponents(
                new TextDisplayBuilder()
                  .setContent("-# **J√° existe uma solicita√ß√£o de whitelist para este jogador.**"),
              )
              .addTextDisplayComponents(
                new TextDisplayBuilder()
                  .setContent("-# **Aguarde a an√°lise dos administradores.**"),
              ),
          ];

          await interaction.reply({
            components: duplicateRequestComponents,
            flags: MessageFlags.Ephemeral | MessageFlags.IsComponentsV2
          });
          
          this.logger.log(`‚ö†Ô∏è ${interaction.user.username} tentou criar solicita√ß√£o duplicada para ${nickname} - canal ${existingChannel.name} j√° existe`);
          return;
        }

        const channelName = `${nickname.toLowerCase()}`;
        const channel = await guild.channels.create({
          name: channelName,
          type: ChannelType.GuildText,
          parent: category.id,
          topic: `Solicita√ß√£o de whitelist para ${nickname} por ${interaction.user.username}`
        });

        const components = [
          new ContainerBuilder()
            .setAccentColor(16711680)
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent("-# üìù Nova Solicita√ß√£o de Whitelist"),
            )
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# üéÆ **Nickname Minecraft:** \`${nickname}\``),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# üë§ **Usu√°rio Discord:** ${interaction.user.toString()}`),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# üÜî **ID Discord:** \`${interaction.user.id}\``),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent(`-# üìÖ **Data da Solicita√ß√£o:** <t:${Math.floor(Date.now() / 1000)}:F>`),
            )
            .addSeparatorComponents(
              new SeparatorBuilder()
                .setSpacing(SeparatorSpacingSize.Small)
                .setDivider(true),
            )
            .addTextDisplayComponents(
              new TextDisplayBuilder()
                .setContent("-# **Clique nos bot√µes abaixo para gerenciar a solicita√ß√£o:**"),
            )
            .addActionRowComponents(
              new ActionRowBuilder<MessageActionRowComponentBuilder>()
                .addComponents(
                  new ButtonBuilder()
                    .setStyle(ButtonStyle.Success)
                    .setLabel("aprovar")
                    .setCustomId(`approve-${channel.id}`),
                  new ButtonBuilder()
                    .setStyle(ButtonStyle.Danger)
                    .setLabel("negar")
                    .setCustomId(`deny-${channel.id}`),
                ),
            ),
        ];

        await channel.send({
          components: components,
          flags: MessageFlags.IsComponentsV2
        });

        await channel.send({
          content: "@here",
        });

        await interaction.reply({
          content: `‚úÖ **Solicita√ß√£o de Whitelist Enviada!**\n\nüéÆ **Nickname:** \`${nickname}\`\nüìß **Canal:** ${channel.toString()}\n\n‚è≥ Sua solicita√ß√£o foi criada e enviada para os administradores. Aguarde a aprova√ß√£o!`,
          flags: MessageFlags.Ephemeral
        });

        this.logger.log(`üìù Solicita√ß√£o de whitelist criada: ${nickname} (${interaction.user.username}) - Canal: ${channel.name}`);

      } catch (error) {
        this.logger.error('Erro ao criar solicita√ß√£o de whitelist:', error);
        await interaction.reply({
          content: '‚ùå **Erro:** N√£o foi poss√≠vel criar a solicita√ß√£o. Tente novamente mais tarde.',
          flags: MessageFlags.Ephemeral
        });
      }
    }
  }
} 